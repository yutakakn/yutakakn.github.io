/*'99/2/1
 *Ｃマガジン '99/2月号『Ｃマガ電脳クラブ　第95回』
 *　with LSIC-86 Ver.3.5
 *
 *puz9902.c
 *標題【絶対なるかけひき】
 *
 *●makefile
 *a.exe: puz9902.c
 *	lcc86 -o a.exe puz9902.c
 *
 *●LSICについて
 *　コンパイルを行うとエラーがでるがこれは c:\lsij\lsic86\bin\makedef で
 *　CC = lcc86と修正することで直る。
 *
 *　math.hを使うには c:\lsij\lsic86\bin\_lcc86 の最終行を変更する。
 *　　-lknjlib -lmathlib -ldoslib
 *             ~~~~~~~~~追加（この位置でないとダメ）
 *
 *　makeコマンドは c:\lsij\lsic86\bin\kmmake.exeであるが make.exe と
 *　リネームした方が使いやすい。
 *
 *　Windowsにインストールした場合ルートの autoexec.bat にパスを通す必要が
 *　あるが、最後の行に call \lsij\lsic86\bin\env86.bat を追加するだけで
 *　よい。こうすると、Windows起動時にバッチファイルの実行経過が見えてしま
 *　うので、env86.batの最初の行に @echo off を入れておけば抑止される。
 *
 *Copyright (C)1995-1999 平田豊
 *All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 9
#define POS(x,y) ((x) + (y)*N)
#define BIT(n) (1 << (n))

int board[N * N];           /* 盤 */
int calbuf[10][10][10];     /* "絶対なるかけひき"の計算式テーブル */
int num[10];                /* 選んだ数字の組み合わせ */
/*int tmp_board[N * N];*/

void disp(int *s)
{
	int x, y;
	
	for (y = 0 ; y < N ; y++) {
		for (x = 0 ; x < N ; x++) {
			if (s[POS(x,y)] == -1) printf(" ");
			else printf("%d", s[POS(x,y)]);
		}
		printf("\n");
	}
}

/* 規則にしたがって盤を埋めていく */
int setBoard(void)
{
	int x, y, sx, sy, n;
	
	sy = 1;
	for (sx = N - 2 ; sx >= 1 ; sx--) {
		x = sx; y = sy;
		do {
			n = calbuf[board[POS(x, y-1)]][board[POS(x+1, y-1)]][board[POS(x+1, y)]];
			if (board[POS(x,y)] >= 0 && board[POS(x,y)] != n) return 1;
			board[POS(x,y)] = n;
			x++; y++;
		} while(x < N - 1);
	}
	sx = 0;
	for (sy = 1; sy <= N - 1; sy++) {
		x = sx; y = sy;
		do {
			n = calbuf[board[POS(x, y-1)]][board[POS(x+1, y-1)]][board[POS(x+1, y)]];
			if (board[POS(x,y)] >= 0 && board[POS(x,y)] != n) return 1;
			board[POS(x,y)] = n;
			x++; y++;
		} while(y < N);
	}
	return 0;
}

/* 文字部分の枠を選んだ数字でセット。*/
void setFrame(void)
{
	int i;

	for (i = 0 ; i < N*N ; i++) board[i] = -1;
	
	board[POS(2,0)] = 
	board[POS(6,0)] = 
	board[POS(8,2)] = 
	board[POS(8,4)] = 
	board[POS(0,8)] = num[0];
	
	board[POS(8,0)] = num[1];
	
	board[POS(0,0)] = 
	board[POS(8,8)] = 
	board[POS(5,3)] = num[2];
	
	board[POS(1,0)] = 
	board[POS(4,0)] = 
	board[POS(8,3)] = 
	board[POS(2,6)] = num[3];
	
	board[POS(8,6)] = 
	board[POS(3,5)] = num[4];

	board[POS(7,0)] = num[5];
	
	board[POS(8,1)] = 
	board[POS(1,7)] = num[6];

	board[POS(5,0)] = 
	board[POS(8,7)] = 
	board[POS(4,4)] = num[7];

	board[POS(3,0)] = num[8];
	
	board[POS(8,5)] = num[9];

/*	for (i = 0 ; i < N*N ; i++) tmp_board[i] = board[i];*/
}

/* 再帰関数（メイン） */
int sub(int n, int bit)
{
	int i;
	
	if (n >= 10) { /* 10個の数字を選び出した */
		setFrame();
		if (setBoard() == 0) { /* 解 */
/*			disp(tmp_board); puts("↓");*/
			disp(board);
			return 1;
		}
		return 0;
	}
	
	for (i = 0 ; i < 10 ; i++) {
		if (bit & BIT(i)) continue;
		num[n] = i;
		if (sub(n + 1, bit | BIT(i)) == 1) return 1;
	}
	return 0;
}

/* 式の組み合わせはあらかじめ計算しておく。*/
void init(void)
{
	int i, j, k, n;
	
	for (i = 0 ; i < 10 ; i++)
		for (j = 0 ; j < 10 ; j++)
			for (k = 0 ; k < 10 ; k++) {
				n = i * k - j;
				if (n < 0) n *= -1;
				n %= 10;
				calbuf[i][j][k] = n;
			}
}

int main(void)
{
	time_t s = time(NULL);

	init();
	sub(0, 0);

	s = time(NULL) - s;
	printf("実行時間 %ld : %ld : %ld\n",(s/60)/60, (s/60)%60 , s % 60);
	return 0;
}

