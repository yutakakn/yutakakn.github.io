/*'96/5/24 - 5/27
 *Ｃマガジン '96/6月号　『Ｃマガ電脳クラブ　第６３回』　
 *  with Turbo C++ 4.0J for DOS
 *
 *PUZ9606.C
 *
 *「トライアングル」
 *Copyright (C) 1995-1996 平田　豊(Yutaka Hirata)
 *All rights reserved.
 */
/*
標題：「トライアングル」

解答：以下の通り

長さ 9, 4-6 , 7-8 , 9-3
長さ 90, 16-54 , 55-75 , 76-15
長さ 125, 3-72 , 73-102 , 103-2
長さ 125, 58-92 , 93-117 , 118-57
長さ 153, 52-102 , 103-135 , 136-51
長さ 189, 16-110 , 111-155 , 156-15
長さ 440, 25-255 , 256-360 , 361-24
長さ 819, 57-476 , 477-671 , 672-56
長さ 989, 165-594 , 595-824 , 825-164
合計 9 組

使用機種：PC-9821 V7/S5KA (Pentium 75MHz)
ＯＳ：MS-DOS 6.2
コンパイラ：Turbo C++ 4.0J for DOS
実行時間： 47 秒

・プログラムの説明
　Ｎは１から１０００までですが、それぞれの１からＮまでの和（＝Ｓ）が３で
割り切れないものは初めから除外しています。そのＳを３で割ったものが各辺の
長さとなります。init関数にて配列hen[]にその取るべき辺の長さを入れています。
アルゴリズムは１から順に数字が入っている配列a[]においてＮまで、３つずつに
分けていき、ちょうど２辺分分けられたら、それが解となります。解が見つかって
も、まだあるかもしれないので繰り返し、始点を増やしループを回します。

・感想
　枝刈の方法が全く思いつかなかったので、えらく時間のかかるプログラムとなっ
てしまいました。テーブルを使えばもっと高速になりそうなのですが。
それに1000個も調べているのに、解が９個だけというのも自信がありません。
一応作ったので応募してみたのですが．．．。
*/
#include <stdio.h>

/*マクロで定義した開始点を求めるﾙｰﾁﾝ*/
#define START() {\
	do{\
		start[0]++;\
		start[0] %= bar;\
		if(start[0] == 0) goto NEXT;\
	}while(check[start[0]] == 1);\
}

/*マクロで定義した枝刈ﾙｰﾁﾝ
 *例えば1辺が15で 2,3,4,5,6...と来れば和が20となり15を超してしまうので、
 *開始点を次へ進めます。しかし、3,4,5,6,...としても和が18で超してしまうので
 *調べなくてもいいことと考えます。この時は2つ分進めることにします。
 */
#define EDAKARI() {\
	if(sum - a[start[0]] > hen[bar]){\
		if(check[(start[0]+2) % bar] != 1){\
			start[0] += 2;\
			start[0] %= bar;\
			continue;\
		}\
	}\
}

#define N 1000         /*総ﾃﾞｰﾀ数*/

enum{
	OK , NO ,
};

long hen[N + 1];          /*取るべき一辺の長さ*/
int a[N];       /*これを元に３つに分ける*/
int cnt;        /*合計組*/
int bar;       /*現在の棒の長さＮ*/
int start[3] , end[3];    /*各辺の開始棒の位置*/
int check[N + 1];         /*重複ﾁｪｯｸ用*/
long sum;                 /*枝刈用*/

/*見つかった解のそれぞれの先頭をﾁｪｯｸします。
 *重複して解を表示しないように。
 */
void check_on()
{
	int i;
	for(i=0;i<3;i++)
		check[start[i]] = 1;
}

/*配列の添え字 *s から始めて、合計が hen[bar] になるか、それを超えるまで
 *ループします。見つかれば、その終端位置を *e に格納します。
 */
int find(int *s , int *e)
{
	int i;
	long t;

	t = 0;
	i = *s;
	for(;;){
		t += a[i];
		if(t == hen[bar]){  /*和がぴったりのものが見つかった*/
			*e = i;
			return( OK );
		}
		if(t > hen[bar]){
			sum = t;       /*枝刈用に*/
			*e = i;
			break;
		}
		i++;
		i %= bar;
		if(i == *s) break;
	}
	return( NO );
}

/*メインアルゴリズム*/
void sub()
{
	int ret1,ret2;

	for(;;){
		for(;;){
			for(;;){
				ret1 = find(&start[0],&end[0]);
				if(ret1 == OK) break;   /*見つかった*/
				EDAKARI();
				START();
			}

			start[1] = end[0]+1;
			ret2 = find(&start[1], &end[1]);
			if(ret2 == OK){
				if( (end[1] + 1)%bar != start[0] )
					break;
				printf("バー %d では２辺しか得られませんでした\n",bar);
			}
			EDAKARI();
			START();
		}

		/*ここまでくれば解が見つかった*/
		start[2] = (end[1] + 1) % bar;
		end[2] = ((start[0]-1 < 0) ? (N-1) : (start[0]-1));

		printf("長さ %d, %d-%d , %d-%d , %d-%d\n",bar,
		a[start[0]],a[end[0]], a[start[1]],a[end[1]],
		a[start[2]],a[start[0]-1]);
		cnt++;

		check_on();     /*見つかった解に対しﾁｪｯｸする*/
		START();        /*他には解はないか調べる*/
	}
NEXT:;
}

/*初期化ﾙｰﾁﾝ*/
void init()
{
	int i;
	long s;

	for(i = 1; i <= N ;i++){     /*和が３で割れるものを探します。*/
		s = (long)i*(i+1)/2;
		if(s % 3 == 0){
			hen[i] = (long)s / 3;    /* flag on */
		}
		a[i-1] = i;
	}
	cnt = 0;
}

/*メイン関数*/
int main()
{
	long t,t1;

	puts("Ｃマガジン '96/6月号　『Ｃマガ電脳クラブ　第６３回』");
	t = time(NULL);
	init();

	for(bar = 1; bar <= N; bar++){
		if(hen[bar] == 0) continue;  /*条件を満たすかものか?*/
		start[0] = 0;
		memset(check,0,sizeof(check));

		sub();
	}

	printf("合計 %d 組\n",cnt);

	t1 = time(NULL) - t;
	fprintf(stderr,"実行時間 %ld 分 %ld 秒\n",t1/60,t1%60);
	return 0;
}
