/* 2001/6/25 - 7/1
 *
 * puz0107.c    with Borland C++Compiler 5.5.1(Windows2000)
 *                   gcc 2.96(RedHat Linux 7.1)
 *
 * CMAGAZINE 2001/7 No.124[タンク・チェンジ]
 *
 * Copyright (C)1996-2001 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

#define NDEBUG   /* for assert(3): assert機能を抑止する場合に定義する */

#ifdef __GNUC__
	#define INLINE inline
#else
	#define INLINE
#endif


enum {
	A_TANK = 0, B_TANK = 1, EMPTY = 2,
	W = 7,
	H = 5,
};

#define BIT(n) (1 << (n - 1))    /* 盤面はビットで表す */


/* 生成された盤面の記録テーブル */
#define REC_MAX 9000

typedef struct {
	int prev;
	int step;
	int board[2];
} record_t;

record_t record[REC_MAX];
int rec_cnt;


/* 盤面の表示 */
void show(int board[W][H])
{
	int x, y;
	char *str = "Ab_";

	for (y = 0 ; y < H ; y++) {
		for (x = 0 ; x < W ; x++) {
			if ((x % 2 && y % 2) || (x % 2 == 0 && y % 2 == 0))
				printf("%c ", str[board[x][y]]);
			else
				printf("  ");
		}
		printf("\n");
	}
}


/* ビットテーブルからXY盤面へ変換する */
INLINE void flag_to_board(int a_flag, int b_flag, int board[W][H])
{
	static int table[18 + 1] = {
		-1,
		0, 2, 4, 11, 13, 20, 22, 24, 31, 33,
		40, 42, 44, 51, 53, 60, 62, 64,
	};
	int x, y, i;

	/* 盤面の初期化 */
	for (y = 0 ; y < H ; y++) {
		for (x = 0 ; x < W ; x++) {
			board[x][y] = EMPTY;
		}
	}

	for (i = 1 ; i <= 18 ; i++) {
		if (a_flag & BIT(i)) {
			x = table[i] / 10;
			y = table[i] % 10;
			assert(board[x][y] == EMPTY);
			board[x][y] = A_TANK;
		}
		if (b_flag & BIT(i)) {
			x = table[i] / 10;
			y = table[i] % 10;
			assert(board[x][y] == EMPTY);
			board[x][y] = B_TANK;
		}
	}
}


/* XY盤面から各戦車の位置を割り出しビットテーブルへ変換する */
INLINE void board_to_flag(int board[W][H], int *a_flag, int *b_flag)
{
	static int table[H][W] = {
		{1, 0, 6,  0, 11,  0, 16},
		{0, 4, 0,  9,  0, 14,  0},
		{2, 0, 7,  0, 12,  0, 17},
		{0, 5, 0, 10,  0, 15,  0},
		{3, 0, 8,  0, 13,  0, 18},
	};
	int x, y, pos, af, bf;

	af = bf = 0;
	for (y = 0 ; y < H ; y++) {
		for (x = 0 ; x < W ; x++) {
			if (!((x % 2 && y % 2) || (x % 2 == 0 && y % 2 == 0)))
				continue;

			pos = table[y][x];
			if (board[x][y] == A_TANK) {
				af |= BIT(pos);
			}
			if (board[x][y] == B_TANK) {
				bf |= BIT(pos);
			}

		}
	}

	*a_flag = af;
	*b_flag = bf;
}

/* (x,y)にある戦車を(dx,dy)へ移動させて新しい盤面を作る。
 *
 * 返り値 0: 新規盤面
 *        1: 撃たれる
 */
INLINE int make_new_board(int board[W][H], int x, int y, int dx, int dy, int new_board[W][H])
{
	static int dirs[4][2] = {
		{1,1}, {1,-1}, {-1,1}, {-1,-1},
	};
	int tank, i, j, k, sx, sy;

	assert(board[x][y] != EMPTY);
	assert(board[dx][dy] == EMPTY);

	tank = board[x][y];

	/* (dx,dy)の4方向線上に敵がいないかチェック */
	for (k = 0 ; k < 4 ; k++) {
		for (i = 1 ; i <= 4 ; i++) {
			sx = dx + i * dirs[k][0];
			sy = dy + i * dirs[k][1];

			if (sx > W - 1 || sx < 0 || sy > H - 1 || sy < 0)
				break;

			if (board[sx][sy] == (tank ^ 1))
				return 1;
		}
	}

	for (j = 0 ; j < H ; j++) {
		for (i = 0 ; i < W ; i++) {
			new_board[i][j] = board[i][j];
		}
	}
	new_board[x][y] = EMPTY;
	new_board[dx][dy] = tank;

	return 0;
}


INLINE void get_board_info(int index, int board[W][H], int *step)
{
	int af, bf;

	assert(index >= 0 && index < rec_cnt);

	af = record[index].board[A_TANK];
	bf = record[index].board[B_TANK];
	flag_to_board(af, bf, board);

	*step = record[index].step;
}

INLINE int get_last_index(void)
{
	assert(rec_cnt > 0);
	return (rec_cnt - 1);
}

/* 盤面をデータベースへ記録する
 *
 * 返り値 0: 登録成功
 *        1: 過去に登場した盤面だった
 *        2: 解
 */
INLINE int set_board_info(int board[W][H], int step, int prev)
{
	int af, bf, i;

	board_to_flag(board, &af, &bf);

	/* 新しい盤面かどうかをチェック */
	for (i = 0; i < rec_cnt ; i++) {
		if (record[i].board[0] == af && record[i].board[1] == bf) {
			return 1;
		}
	}

	assert(rec_cnt < REC_MAX);
	record[rec_cnt].prev = prev;
	record[rec_cnt].step = step;
	record[rec_cnt].board[A_TANK] = af;
	record[rec_cnt].board[B_TANK] = bf;
	rec_cnt++;

	/* 解か？ */
	if (board[0][0] == B_TANK &&
		board[0][2] == B_TANK &&
		board[0][4] == B_TANK &&
		board[6][0] == A_TANK &&
		board[6][2] == A_TANK &&
		board[6][4] == A_TANK) {

		return 2;
	}

	return 0;
}

/* 最短手までの遷移状態の表示
 *
 * n = 手数
 */
void display(int n)
{
	int board[W][H], step;

	if (record[n].prev == -1) {
		printf("開始盤面\n");
		get_board_info(n, board, &step);
		show(board);
		return;
	}

	display(record[n].prev);

	get_board_info(n, board, &step);
	printf("\n%d 手目\n", step);
	show(board);
}


/* 幅優先探索による解法ルーチン */
void sub(void)
{
	static int dirs[4][2] = {
		{1,1}, {1,-1}, {-1,1}, {-1,-1},
	};
	int x, y, tank, i, k, dx, dy;
	int step, index;
	int found;
	int st, ret;
	int board[W][H], new_board[W][H];

	/* 1手目から順に解を探す */
	for (step = 1; step < 1000 ; step++) {
		found = 0;

		/* 1手前の盤面を取り出す */
		for (index = get_last_index() ; index >= 0; index--) {
			get_board_info(index, board, &st);

			if (st < step - 1)
				break;

			/* 奇数なら戦車A、偶数なら戦車B */
			if (step & 1) {
				tank = A_TANK;
			} else {
				tank = B_TANK;
			}

			/* 戦車tankを盤面から探す */
			for (y = 0 ; y < H ; y++) {
				for (x = 0 ; x < W ; x++) {
					if (!((x % 2 && y % 2) || (x % 2 == 0 && y % 2 == 0)))
						continue;

					if (board[x][y] != tank)
						continue;

					/* 4方向へ戦車を移動させてみる */
					for (k = 0 ; k < 4 ; k++) {
						for (i = 1 ; i <= 4 ; i++) {
							dx = x + i * dirs[k][0];
							dy = y + i * dirs[k][1];

							if (dx > W - 1 || dx < 0 || dy > H - 1 || dy < 0)
								break;

							/* 途中で戦車がいたらもう先へは進めない */
							if (board[dx][dy] != EMPTY)
								break;

							ret = make_new_board(board, x, y, dx, dy, new_board);
							if (ret == 0) {
								/* step手目登録 */
								ret = set_board_info(new_board, step, index);
								if (ret == 0) {
									found++;
								}
								if (ret == 2) {
									printf("解発見\n");
									display(rec_cnt - 1);
									return;
								}
							}

						}
					}

				}
			}

		}

		if (found == 0) {
			printf("もうこれ以上見つからない\n");
			return;
		}
	}

}


/* 初期化 */
void init(void)
{
	int x, y;
	int board[W][H];

	for (y = 0 ; y < H ; y++) {
		for (x = 0 ; x < W ; x++) {
			board[x][y] = EMPTY;
		}
	}

	for (y = 0; y <= 4 ; y += 2) {
		board[0][y] = A_TANK;
		board[6][y] = B_TANK;
	}

	/* 0手目登録 */
	set_board_info(board, 0, -1);
}

int main(void)
{
	clock_t t = clock();

	init();
	sub();

    printf("time %.2f\n", (double)((clock() - t) / CLOCKS_PER_SEC));
	return 0;
}

