/* 2000/10/24 - 10/29
 *
 * puz0011.c    with gcc 2.95.2(TurboLinux Workstation 6.0)
 * CMAGAZINE 2000/11 No.116[Ｈ２Ｏ]
 *
 * Copyright (C)1996-2000 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>

#define SIZE (10*10)  /* 盤面の大きさ */
#define POS(x,y) ((x) + (y)*10)

int start_board[SIZE] = {  /* 開始盤面 */
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 1,0,0,1, 0,0,0,0, 0,
	0, 1,1,1,1, 0,0,0,0, 0,
	0, 1,0,0,1, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
};

int end_board[SIZE] = {  /* 終了盤面 */
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 1,1,1,0, 0,0,0,0, 0,
	0, 1,0,1,0, 0,0,0,0, 0,
	0, 1,1,1,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
	0, 0,0,0,0, 0,0,0,0, 0,
};


#define HASH_SIZE 65536
typedef struct {
	int pos[8];
	int empty;
} bucket_t;

bucket_t hash[HASH_SIZE];  /* ハッシュテーブル */


#define REC_SIZE 1000
typedef struct {
	int step;      /* 手数 */
	int index;     /* ハッシュインデックス */
	int prev_cnt;  /* 1手前の盤面を指すハッシュインデックス */
} record_t;

record_t record[REC_SIZE]; /* 保存用生成盤面 */
int rec_cnt;


typedef struct {
	int x,y;
} point_t;
point_t points[10];  /* コインの置ける位置 */
int pnt_cnt;

int last_index;  /* 最終局面のハッシュインデックス */

/* 関数プロトタイプ宣言 */
void pos_to_board(int *pos, int *board);
void index_to_board(int index, int *board);

void disp(int *board)
{
	int x, y, c;

	/*printf(" 12345678\n"); */
	for (y = 1 ; y <= 5 ; y++) {
		/*printf("%d",y); */
		for (x = 1 ; x <= 8 ; x++) {
			c = board[POS(x,y)];
			printf("%c", c ? '*' : '_');
		}
		printf("\n");
	}
	printf("\n");
}

void disp_reverse(int n)
{
	int index, board[SIZE];

	do {
		index = record[n].index;
		index_to_board(index, board);

		printf("%d 手目\n", record[n].step);
		disp(board);
		n = record[n].prev_cnt;
	} while(n != -1);
}

#if 0
void disp_hash(void)
{
	int i, j, board[SIZE], step;

	for (i = 0 ; i < HASH_SIZE ; i++) {
		if (hash[i].empty == 1) {
			printf("Index=%d\n", i);

			for (j = 0 ; j < rec_cnt ; j++)
				if (record[j].index == i)
					break;
			if (j == rec_cnt) 
				step = -1;
			else
				step = record[j].step;

			printf("Step: %d\n", step);
			pos_to_board(hash[i].pos, board);
			disp(board);
		}
	}
}
#endif

/* コインが位置(x,y)にはっきり決まるかチェックする */
int valid_connect(int x, int y, int *board)
{
	int vf, hf;

	vf = hf = 0;

	if (board[POS(x,y-1)] == 1 && board[POS(x,y+1)] == 1) 
		vf = 1;
	if (board[POS(x-1,y)] == 1 && board[POS(x+1,y)] == 1) 
		hf = 1;
	if ((vf && !hf) || (!vf && hf)) {
		return 0;
	}
	return 1;
}

/* コイン(x,y)の上下左右に接しているコイン数を数える */
int get_dirs(int x, int y, int *board)
{
	int n = 0;

	if (board[POS(x,y-1)] == 1) n++;
	if (board[POS(x,y+1)] == 1) n++;
	if (board[POS(x-1,y)] == 1) n++;
	if (board[POS(x+1,y)] == 1) n++;
	return (n);
}

/* 盤面を正規化（左上寄せ）する */
void normalize(int *current, int *board)
{
	int x, y, sx, sy;

	for (y = 1 ; y <= 8 ; y++) {
		for (x = 1 ; x <= 8 ; x++) {
			if (current[POS(x,y)] != 0) break;
		}
		if (x <= 8) break;
	}
	sy = y;

	for (x = 1 ; x <= 8 ; x++) {
		for (y = 1 ; y <= 8 ; y++) {
			if (current[POS(x,y)] != 0) break;
		}
		if (y <= 8) break;
	}
	sx = x;

	for (y = sy ; y <= 8 ; y++) {
		for (x = 1 ; x <= 8 ; x++) {
			board[POS(x, y - sy + 1)] = current[POS(x,y)];
		}
	}
	for (x = sx ; x <= 8 ; x++) {
		for (y = 1 ; y <= 8 ; y++) {
			board[POS(x - sx + 1, y)] = board[POS(x,y)];
		}
	}
}

/* コイン(px,py)の移動先を探す */
void enable_put(int px, int py, int *board)
{
	int x, y, n;

	n = get_dirs(px,py,board);
	if (n == 4) return;  /* コインは動かせない */

	board[POS(px,py)] = -1;

	for (y = 1 ; y <= 8 ; y++) {
		for (x = 1 ; x <= 8 ; x++) {
			if (board[POS(x,y)] != 0) continue;

			n = get_dirs(x,y,board);
			if (n == 4) continue;  /* 塞がれている */

			if (n >= 2 && valid_connect(x,y,board)) {
				points[pnt_cnt].x = x;
				points[pnt_cnt].y = y;
				pnt_cnt++;
			}
		}
	}
	board[POS(px,py)] = 1;
}

/* ハッシュインデックスから盤面を生成 */
void index_to_board(int index, int *board)
{
	int i, pos;

	for (i = 0 ; i < SIZE ; i++) {
		board[i] = 0;
	}
	for (i = 0 ; i < 8 ; i++) {
		pos = hash[index].pos[i];
		board[pos] = 1;
	}
}

/* ハッシュテーブルへ登録 */
void set_hash(int index, int *pos)
{
	int i;

	for (i = 0 ; i < 8 ; i++) {
		hash[index].pos[i] = pos[i];
	}
	hash[index].empty = 1;
}

/* コイン情報からハッシュインデックスを求める。
 * cf. CMAGAZINE 2000/11(p.22-25)
 */
int pos_to_index(int *pos)
{
	bucket_t bkt;
	int i, bit, cnt;

	bit = 0;
	for (i = 0 ; i < 8 ; i++) {
		bit = (bit << 2) + pos[i];
	}
	bit %= HASH_SIZE;

	cnt = 0;
	for (;;) {
		bkt = hash[bit];
		if (bkt.empty == 0) 
			return (bit);

		for (i = 0 ; i < 8 ; i++) {
			if (pos[i] != bkt.pos[i])
				break;
			}
			if (i == 8)
				return (bit);

			bit = (bit + 1) % HASH_SIZE;
			cnt++;
			if (cnt >= HASH_SIZE) {
				printf("Hash full\n");
				exit(1);
		}
	}
}

/* 盤面からコイン情報を生成 */
void board_to_pos(int *board, int *pos)
{
	int x, y, n, c;

	n = 0;
	for (y = 1 ; y <= 8 ; y++) {
		for (x = 1 ; x <= 8 ; x++) {
			c = board[POS(x,y)];
			if (c == 1) {
				pos[n] = POS(x,y);
				n++;
				if (n == 8) return;
			}
		}
	}
}

/* コイン情報から盤面を生成 */
void pos_to_board(int *pos, int *board)
{
	int i;

	for (i = 0 ; i < SIZE ; i++) {
		board[i] = 0;
	}
	for (i = 0 ; i < 8 ; i++) {
		board[pos[i]] = 1;
	}
}

/* 探索メイン処理 */
void sub(void)
{
	int i, j, step, index, new_index, x, y, tmp;
	int board[SIZE], pos[8], nrm_board[SIZE];

	/* 幅優先探索で0手目から順に探す */
	for (step = 0; step < 100 ; step++) {
		printf("%d Step...\n", step);

		/* step手目の盤面を取り出す */
		for (i = rec_cnt - 1 ; i >= 0 ; i--) {
			if (record[i].step < step) break;

			index = record[i].index;
			index_to_board(index, board);

			/* 移動するコインを選ぶ */
			for (y = 1 ;y <= 8 ; y++) {
				for (x = 1 ; x <= 8 ; x++) {
					if (board[POS(x,y)] == 0) continue;

					/* コインの移動先を探す */
					pnt_cnt = 0;
					enable_put(x, y, board);

					for (j = 0 ; j < pnt_cnt ; j++) {
						/* コインの入れ替え */ 
						tmp = board[POS(x,y)];
						board[POS(x,y)] = board[POS(points[j].x, points[j].y)];
						board[POS(points[j].x, points[j].y)] = tmp;

						normalize(board, nrm_board);  /* 正規化 */
						board_to_pos(nrm_board, pos);
						new_index = pos_to_index(pos);


						if (hash[new_index].empty == 0) { /* 新規盤面なら */
							set_hash(new_index, pos);

							record[rec_cnt].index = new_index;
							record[rec_cnt].step = step + 1;
							record[rec_cnt].prev_cnt = i;
							rec_cnt++;

							/* 最終盤面なら解 */
							if (new_index == last_index) {
								printf("解 %d 手\n\n", step + 1);
								disp_reverse(rec_cnt-1);
								goto FINISH;
							}
						}

						/* 盤面の復元 */
						tmp = board[POS(x,y)];
						board[POS(x,y)] = board[POS(points[j].x, points[j].y)];
						board[POS(points[j].x, points[j].y)] = tmp;
					}
				}
			}

		}
	}
FINISH:;
}

void init(void)
{
	int pos[8], index;
	
	/* 終了盤面 */
	board_to_pos(end_board, pos);
	last_index = pos_to_index(pos);

	/* 開始盤面 */
	board_to_pos(start_board, pos);
	index = pos_to_index(pos);
	set_hash(index, pos);

	rec_cnt = 0;
	record[rec_cnt].index = index;  
	record[rec_cnt].step = 0;
	record[rec_cnt].prev_cnt = -1;
	rec_cnt++;
}

int main(void)
{
	clock_t t = clock();

	init();
	sub();
	
    printf("time %.2f\n", (double)((clock() - t) / CLOCKS_PER_SEC));
	return 0;
}

