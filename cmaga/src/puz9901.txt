/*'98/12/27
 *Ｃマガジン '99/1月号『Ｃマガ電脳クラブ　第94回』
 *　with LSIC-86 Ver.3.5
 *
 *puz9901.c
 *標題【昇順素数】
 *
 *●makefile
 *a.exe: puz9901.c
 *	lcc86 -o a.exe puz9901.c
 *
 *●LSICについて
 *　コンパイルを行うとエラーがでるがこれは c:\lsij\lsic86\bin\makedef で
 *　CC = lcc86と修正することで直る。
 *
 *　math.hを使うには c:\lsij\lsic86\bin\_lcc86 の最終行を変更する。
 *　　-lknjlib -lmathlib -ldoslib
 *             ~~~~~~~~~追加（この位置でないとダメ）
 *
 *　makeコマンドは c:\lsij\lsic86\bin\kmmake.exeであるが make.exe と
 *　リネームした方が使いやすい。
 *
 *　Windowsにインストールした場合ルートの autoexec.bat にパスを通す必要が
 *　あるが、最後の行に call \lsij\lsic86\bin\env86.bat を追加するだけで
 *　よい。こうすると、Windows起動時にバッチファイルの実行経過が見えてしま
 *　うので、env86.batの最初の行に @echo off を入れておけば抑止される。
 *
 *Copyright (C)1995-1999 平田豊
 *All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int primetable[2000] = {3, 5, 7};
int prime_max;

long upprime[120] = {2,3,5,7};
int up_max = 4;

void sub(void)
{
	int i, j, k, s, cnt;
	long n;
	
	cnt = 0;
	for (i = 0 ; i < up_max ; i++) {
		for (j = i + 1 ; j < up_max ; j++) {
			for (k = j + 1 ; k < up_max ; k++) {
				n = upprime[i]+upprime[j]+upprime[k];
				
				for (s = 0 ; s < up_max ; s++) {
					if (upprime[s] > n) break;
					if (upprime[s] == n) {
						cnt++;
/*						printf("%ld + %ld + %ld = %ld\n",
							upprime[i], upprime[j], upprime[k], n);*/
					}
				}
				
			}
		}
	}
	printf("以上 %d 通り\n", cnt);
}

int isprime(long n)
{
	int i;
	int p;
	
	for (i = 0 ; i < prime_max ; i++) {
		p = primetable[i];
		if (p * p > n) break;
		if (n % p == 0) return 0;
	}
	return 1;
}

void makeUp(int n, int prev, long num)
{
	int i;
	
	if (n >= 9) {
		if (prev % 2 == 0) return;
		if (num <= 7) return;
		
		if (isprime(num)) {
			upprime[up_max++] = num;
		}
		return;
	}
	
	for (i = 0 ; i < 10 ; i++) {
		if (i == 0 && prev != i) continue;
		if (i != 0 && prev >= i) continue;
		makeUp(n + 1, i, 10*num + i);
	}
}

void makePrime(void)
{
	int i, n;
	
	prime_max = 2000;
	i = 3;
	n = 11;
	while (i < 2000) {
		if (isprime(n)) {
			primetable[i++] = n;
			if (n > 11111) break; /* √123456789 = 11111.1 */
		}
		n += 2;
	}
	prime_max = i;
}

int main(void)
{
	time_t s = time(NULL);
	
	makePrime();
	makeUp(0, 0, 0);
	sub();

	s = time(NULL) - s;
	printf("実行時間 %ld : %ld : %ld\n",(s/60)/60, (s/60)%60 , s % 60);
	return 0;
}

