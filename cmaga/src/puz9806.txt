/*'98/5/31 - 6/3
 *Ｃマガジン '98/6月号『Ｃマガ電脳クラブ　第８７回』　
 *　with LSIC-86 Ver.3.5
 *
 *puz9806.c
 *標題【Primes in a Prime】
 *
 *[makefile]
 *puz9806.exe: puz9806.c
 *
 *　※kmmake.exeがコマンドであるがmake.exeとリネームした方が
 *　　使いやすい(...\lsic86\bin\kmmake.exe)。
 *
 *[_lcc86](lsic86\bin)
 *mathライブラリを使うため_lcc86の最後の行を次のように変更。
 *　-lknjlib -lmathlib -ldoslib
 *           ^^^^^^^^^追加
 *
 *Copyright (C)1995-1998 平田　豊(Yutaka Hirata)
 *All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

typedef struct{
	int prime;      /* 4桁の素数(ex. 3767) */ 
	int hi;         /* 千の位(3) */
	int low;        /* 一の位(7) */
	int revprime;   /* 逆(7673)  */
}prime_t;
prime_t prime[300]; 
int prime_cnt;      /* 4桁の素数の個数  */

typedef struct{
	long prime;     /* 8桁の素数 */
	long revprime;  /* 逆 */
}lprime_t;
lprime_t record[1000];

int cprime[1300];  /* 3〜9967までの素数。check()用 */
int cprime_cnt;    /* その個数 */

/* ｎが素数ならば1を返します。*/
int check(long n)
{
	int d,limit;

	limit = (int)sqrt(n);
	for (d = 0 ; d < cprime_cnt ; d++) {
		if (n % cprime[d] == 0) break;
		if (cprime[d] > limit ) break;
	}
	if(cprime[d] > limit || d == cprime_cnt) return 1;
	return 0;
}

void sub(void)
{
	long n,rn;
	lprime_t *p;
	int i,j,ans,k;
	
	k = 0;
	p = record;
	/* 全パターンについて探索 */
	for (i = 0 ; i < prime_cnt ; i++) {
		for (j = 0 ; j < prime_cnt ; j++) {
			/* 8桁のうち、左端の数字＞右端の数字ならば枝刈 */
			if (prime[i].hi > prime[j].low) break;
			n = prime[i].prime * 10000L + prime[j].prime;
			if (check(n)) {
				rn = prime[j].revprime * 10000L + prime[i].revprime;
				if (check(rn)) {
					p->prime = n;
					p->revprime = rn;
					p++;
					k++;
				}
			}
		}
	}

	/* 逆に並べたものと同じものを除く */
	ans = k;
	for (i = 0 ; i < k ; i++){
		if(record[i].prime == -1) continue;
		for (j = k - 1 ; j >= 0 ; j--){
			if(record[j].prime == -1) continue;
			if(i == j) continue;
			if (record[i].revprime == record[j].prime){ 
				record[j].prime = -1;
				ans--;
			}
		}
	}
#if(0) /* ここを１にすると解を表示する */
	for (i = 0 ; i < k ; i++) 
		if (record[i].prime != -1 ) printf("%ld\n",record[i].prime);
#endif
	printf("解 %d 通り\n",ans);
}

/* 4桁の素数を生成します */
void makePrime(void)
{
	static int pm[10000];
	prime_t *p = prime,t;
	int i,j,k,rev;
	
	/* エラトステネスの篩 */
	k = (int)sqrt(9999);
	for (i = 2 ; i <= k ; i++) {
		if (pm[i] == 0)
			for (j = i + i ; j <= 9999 ; j += i)
				pm[j] = 1;
	}
	/* check()で使うために素数を保持しておく */
	for (i = 3,cprime_cnt = 0 ; i < 10000 ; i++) {
		if (pm[i] == 0) {
			cprime[cprime_cnt++] = i;
		}
	}
	
	/* 条件に合うものを探す */
	prime_cnt = 0;
	for (i = 1000 ; i <= 9999 ; i++) {
		if (pm[i] == 0) {
			rev = 0;
			k = i;
			for (j = 1000 ; j >= 1 ; j /= 10) {
				rev += (1000 / j) * (k / j);
				k %= j;
			}
			if (pm[rev] == 0) {
				p->prime = i;
				p->hi = i / 1000;
				p->low = i - (i / 10) * 10;
				p->revprime = rev;
				p++;
				prime_cnt++;
			}
		}
	}
	/* 一の位でソート */
	for (i = 0 ; i < prime_cnt - 1 ; i++)
		for (j = prime_cnt - 1 ; j > i ; j--)
			if (prime[j].low > prime[i].low) {
				t = prime[j];
				prime[j] = prime[i];
				prime[i] = t;
			}
}

int main(void)
{
	clock_t s = clock();

	makePrime();
	sub();
	
	s = clock() - s;
	printf("実行時間 %8.2f 秒\n",(double)s / CLOCKS_PER_SEC);
	return 0;
}

