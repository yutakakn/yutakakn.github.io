/*'99/7/11 - 7/16
 *
 *puz9907.c  with LSIC-86 Ver 3.5(Windows95)
 *CMAGAZINE 1999/7 No.100[ノナヒューブ]
 *
 *Copyright (C)1995-1999 平田豊
 *All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SSIZE 3            /* 立方体のサイズ */
#define SIZE (SSIZE+1)
#define pos(x,y,z) ((x) + (y)*SIZE + (z)*SIZE*SIZE)
#define MAXPOS (SIZE*SIZE*SSIZE - 1 - SIZE)

#define X(n) ( ((n)%16) % 4 )
#define Y(n) ( ((n)%16) / 4 )
#define Z(n) ( (n) / 16 )

/* flagCheskSub()用マクロ */
#define CHK(a,p) {\
	if (area_flag[a] & bit[p - 'A']) return 1;\
}

/* main()用マクロ */
#define AREA_FLAG_SET(a,p) {\
	area_flag[a] |= bit[p - 'A'];\
}

char cube[SIZE * SIZE * SIZE];  /* 立方体 */
int bit[9];

char pieces[12][4] = {   /* 12個のピース（ダイキューブ） */
	"DEED",
	"CFFC",
	"BHHB",
	"GIIG",
	"FHHF",
	"CIIC",
	"AEEA",
	"DGGD",
	"DHHD",
	"EGGE",
	"AIIA",
	"BFFB",
};

int p_flag[12];   /* ピースの使用フラグ */
int area_flag[6]; /* 立方体6面のフラグ */

int anscnt;   /* 解の数 */
int truecnt;  /* 重複を除いた解の数 */

char rec_cube[10][SIZE * SIZE * SIZE];   /* 解の記録 */

void disp(char cube[])
{
	int x, y, z;

	for (z = 0 ; z < SSIZE ; z++) {
		printf("[STAGE %d]\n", z);
		for (y = 0 ; y < SSIZE ; y++) {
			for (x = 0 ; x < SSIZE ; x++) {
				printf("%c ", cube[pos(x,y,z)] ? cube[pos(x,y,z)] : ' ');
			}
			printf("\n");
		}
	}
}

/* "ABC"が(1,0,0)〜(1,2,0)にある場合の重複チェック */
void sameCheck2(void)
{
	int i, j, y;
	
	for (i = 0 ; i < anscnt ; i++) {
		if (rec_cube[i][0] == 'x') continue;
		for (j = i + 1 ; j < anscnt ; j++) {
			if (rec_cube[j][0] == 'x') continue;
			for (y = 0 ; y < 2 ; y++) {
				if (!(rec_cube[i][pos(0,y,0)] == rec_cube[j][pos(2,y,0)] &&
					rec_cube[i][pos(0,y,1)] == rec_cube[j][pos(2,y,1)] &&
					rec_cube[i][pos(0,y,2)] == rec_cube[j][pos(2,y,2)])) {
					break;
				}
			}
			if (y == 2) {
				rec_cube[j][0] = 'x';
			}
			
		}
	}

	j = 0;
	for (i = 0 ; i < anscnt ; i++) {
		if (rec_cube[i][0] != 'x') {
			j++;
			disp( rec_cube[i] );
		}
	}
	truecnt += j;
}

/* "ABC"が(0,0,0)〜(0,2,0)、(1,0,1)〜(1,2,1)にある場合の重複チェック */
void sameCheck(void)
{
	int i, j, y;
	
	for (i = 0 ; i < anscnt ; i++) {
		if (rec_cube[i][0] == 'x') continue;
		for (j = i + 1 ; j < anscnt ; j++) {
			if (rec_cube[j][0] == 'x') continue;
			for (y = 0 ; y < 2 ; y++) {
				if (!(rec_cube[i][pos(1,y,0)] == rec_cube[j][pos(0,y,1)] &&
					rec_cube[i][pos(2,y,0)] == rec_cube[j][pos(0,y,2)] &&
					rec_cube[i][pos(2,y,1)] == rec_cube[j][pos(1,y,2)])) {
					break;
				}
			}
			if (y == 2) {
				rec_cube[j][0] = 'x';
			}
			
		}
	}

	j = 0;
	for (i = 0 ; i < anscnt ; i++) {
		if (rec_cube[i][0] != 'x') {
			j++;
			disp( rec_cube[i] );
			rec_cube[i][0] = 'x';
		}
	}
	truecnt += j;
}

void found(void)
{
	int i;
	
	for (i = 0 ; i < SIZE*SIZE*SIZE ; i++) {
		rec_cube[anscnt][i] = cube[i];
	}
	anscnt++;
	printf("解 %d\n", anscnt);	disp(cube);/**/
}

void flagRestore(int pos, char pi)
{
	static int buf[3][2];
	int x, y, z, area, i, bp;
	
	bp = 0;
	x = X(pos);
	y = Y(pos);
	z = Z(pos);
	
	if (z == 0) {
		area = 0;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (x == 0) {
		area = 1;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (y == 2) {
		area = 2;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (x == 2) {
		area = 3;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (y == 0) {
		area = 4;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (z == 2) {
		area = 5;
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	
	for (i = 0 ; i < bp ; i++) {
		area_flag[ buf[i][0] ] &= ~bit[ buf[i][1] ];
	}
}

int flagCheckSub(int pos, char pi)
{
	static int buf[3][2];
	int x, y, z, area, i, bp;
	
	bp = 0;
	x = X(pos);
	y = Y(pos);
	z = Z(pos);
	
	if (z == 0) {
		area = 0;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (x == 0) {
		area = 1;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (y == 2) {
		area = 2;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (x == 2) {
		area = 3;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (y == 0) {
		area = 4;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	if (z == 2) {
		area = 5;
		CHK(area, pi);
		buf[bp][0] = area;
		buf[bp++][1] = pi -'A';
	}
	
	for (i = 0 ; i < bp ; i++) {
		area_flag[ buf[i][0] ] |= bit[ buf[i][1] ];
	}

	return 0;    /* OK(no duplication) */
}

int flagCheck(int pos1, char p1, int pos2, char p2)
{
	if (flagCheckSub(pos1, p1)) {
		return 1;
	}
	if (flagCheckSub(pos2, p2)) {
		flagRestore(pos1, p1);
		return 1;
	}
	
	return 0;
}

void sub(int pos)
{
	static int dirs[3] = {1, 4, 16};
	int i, j, k, s, tmp;
	
	for (i = 0 ; i < 12 ; i++) {    /* pieces number */
		if (p_flag[i]) continue;
		p_flag[i] = 1;
		
		for (j = 0 ; j < 3 ; j++) { /* 3 direction */
			s = pos + dirs[j];
			if (cube[s] != 0) continue;  /* empty? */
			for (k = 0 ; k < 2 ; k++) {
				cube[pos] = pieces[i][0 + k*2];
				cube[s] = pieces[i][1 + k*2];
				
				if (flagCheck(pos, cube[pos], s, cube[s])) {
					cube[pos] = cube[s] = 0;
					continue;
				}

				tmp = pos;
				while (cube[++tmp] != 0);
				if (tmp > MAXPOS) {
					found();
				} else {
					sub( tmp );
				}

				flagRestore(pos, cube[pos]);
				flagRestore(s, cube[s]);
				cube[pos] = cube[s] = 0;
			}
		}
		p_flag[i] = 0;
	}
	
}

void init(void)
{
	int x, y, z;
	
	for (x = 0 ; x < SIZE ; x++)
		for (y = 0 ; y < SIZE ; y++)
			for (z = 0 ; z < SIZE ; z++) {
				if (x == SSIZE || y == SSIZE || z == SSIZE)
					cube[pos(x,y,z)] = 'W';
				else
					cube[pos(x,y,z)] = 0;
			}
	cube[SIZE*SIZE*SIZE - 1] = 0;     /* sentinel */
	
	for (x = 0 ; x < 12 ; x++)
		p_flag[x] = 0;
	for (x = 0 ; x < 6 ; x++)
		area_flag[x] = 0;
}

int main(void)
{
	time_t s = time(NULL);
	int i;
	
	for (i = 0 ; i < 9 ; i++) {
		bit[i] = (1 << i);
	}
	
	printf("Pattern (1)\n");
	init();
	cube[0] = 'A'; cube[4] = 'B'; cube[8] = 'C';
	AREA_FLAG_SET(0, cube[0]);	AREA_FLAG_SET(1, cube[0]);
	AREA_FLAG_SET(4, cube[0]);	AREA_FLAG_SET(0, cube[4]);
	AREA_FLAG_SET(1, cube[4]);	AREA_FLAG_SET(0, cube[8]);
	AREA_FLAG_SET(1, cube[8]);	AREA_FLAG_SET(2, cube[8]);
	sub(1);

	printf("Pattern (2)\n");
	init();
	cube[1] = 'A'; cube[5] = 'B'; cube[9] = 'C';
	AREA_FLAG_SET(0, cube[1]);	AREA_FLAG_SET(4, cube[1]);
	AREA_FLAG_SET(0, cube[5]);	AREA_FLAG_SET(0, cube[9]);
	AREA_FLAG_SET(2, cube[9]);
	sub(0);

	printf("Pattern (3)\n");
	init();
	cube[17] = 'A'; cube[21] = 'B'; cube[25] = 'C';
	AREA_FLAG_SET(4, cube[17]);	AREA_FLAG_SET(2, cube[25]);
	sub(0);

	sameCheck();
	sameCheck2();
	printf("重複を除いた組み合わせ: %d とおり\n", truecnt);

	s = time(NULL) - s;
	printf("実行時間 %ld : %ld : %ld\n",(s/60)/60, (s/60)%60 , s % 60);
	return 0;
}

