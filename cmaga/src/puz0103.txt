/* 2001/3/8 - 3/11
 *
 * puz0103.c    with gcc 2.95.2(TurboLinux Workstation 6.0)
 * CMAGAZINE 2001/3 No.120[六角形の超線上]
 *
 * Copyright (C)1996-2001 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

#define NDEBUG   /* for assert */

#define RT 1733  /* Y座標を表現するのに使う適当な素数 */
#define NUM 37   /* マスの数 */

/* マスの状態を示すマクロ定義 */
enum {
	EMPTY = 0,  /* 空 */
	COIN,       /* コイン */
	NG,         /* 配置禁止フラグ */
};


/* 六角形のマスの座標位置。
 * マスの1辺を長さ2とし、XY座標軸の原点を一番左下のマスの中心
 * とする。
 */
typedef struct {
	int x, y;
} point_t;

point_t pieces[NUM] = {
	{0, 0}, {2, 0}, {4, 0}, {6, 0},
	{-1, RT}, {1, RT}, {3, RT}, {5, RT}, {7, RT},
	{-2, 2*RT}, {0, 2*RT}, {2, 2*RT}, {4, 2*RT}, {6, 2*RT}, {8, 2*RT},
	{-3, 3*RT}, {-1, 3*RT}, {1, 3*RT}, {3, 3*RT}, {5, 3*RT}, {7, 3*RT}, {9, 3*RT},
	{-2, 4*RT}, {0, 4*RT}, {2, 4*RT}, {4, 4*RT}, {6, 4*RT}, {8, 4*RT},
	{-1, 5*RT}, {1, 5*RT}, {3, 5*RT}, {5, 5*RT}, {7, 5*RT},
	{0, 6*RT}, {2, 6*RT}, {4, 6*RT}, {6, 6*RT},
};


/* 3つ以上のマスを通過する直線 */
typedef struct {
	int num;
	int site[7];
} line_t;

line_t lines[100];
int line_cnt;


/* 1つのマスを交差する直線 */
typedef struct {
	int num;
	int lineno[10];
} cross_t;
cross_t cross[NUM];

int maxcoin = 10;
int board[NUM];   /* 盤面 */

int NG_pos_stack[NUM];   /* 書き戻し用スタック領域 */
int pos_sp;


/* 解 */
int ans_boards[100][NUM];
int ans_cnt;


/* 盤面の表示 */
void disp_board(int *board)
{
	char *a[NUM];
	int i;

	for (i = 0 ; i < NUM ; i++) {
		if (board[i] == COIN)
			a[i] = "●";
		else
			a[i] = "○";
	}

	printf("   %s%s%s%s\n"
		   "  %s%s%s%s%s\n"
		   " %s%s%s%s%s%s\n"
		   "%s%s%s%s%s%s%s\n"
		   " %s%s%s%s%s%s\n"
		   "  %s%s%s%s%s\n"
		   "   %s%s%s%s\n",

		   a[33], a[34], a[35], a[36],
		   a[28], a[29], a[30], a[31], a[32],
		   a[22], a[23], a[24], a[25], a[26], a[27],
		   a[15], a[16], a[17], a[18], a[19], a[20], a[21],
		   a[9], a[10], a[11], a[12], a[13], a[14],
		   a[4], a[5], a[6], a[7], a[8],
		   a[0], a[1], a[2], a[3]
		   );

}


/*
 * 回転鏡像解を取り除く
 */

/* 六角形を裏返す */
void reverse_board(int *org)
{
	int new[NUM], i;

	new[36] = org[33];
	new[35] = org[34];
	new[34] = org[35];
	new[33] = org[36];

	new[32] = org[28];
	new[31] = org[29];
	new[30] = org[30];
	new[29] = org[31];
	new[28] = org[32];

	new[27] = org[22];
	new[26] = org[23];
	new[25] = org[24];
	new[24] = org[25];
	new[23] = org[26];
	new[22] = org[27];

	new[21] = org[15];
	new[20] = org[16];
	new[19] = org[17];
	new[18] = org[18];
	new[17] = org[19];
	new[16] = org[20];
	new[15] = org[21];

	new[14] = org[ 9];
	new[13] = org[10];
	new[12] = org[11];
	new[11] = org[12];
	new[10] = org[13];
	new[ 9] = org[14];

	new[8] = org[4];
	new[7] = org[5];
	new[6] = org[6];
	new[5] = org[7];
	new[4] = org[8];

	new[3] = org[0];
	new[2] = org[1];
	new[1] = org[2];
	new[0] = org[3];

	for (i = 0 ; i < NUM ; i++) {
		org[i] = new[i];
	}
}

/* 六角形を右に回転する */
void rotate_board(int *org)
{
	int new[NUM], i;

	new[36] = org[33];
	new[32] = org[34];
	new[27] = org[35];
	new[21] = org[36];

	new[35] = org[28];
	new[31] = org[29];
	new[26] = org[30];
	new[20] = org[31];
	new[14] = org[32];

	new[34] = org[22];
	new[30] = org[23];
	new[25] = org[24];
	new[19] = org[25];
	new[13] = org[26];
	new[ 8] = org[27];

	new[33] = org[15];
	new[29] = org[16];
	new[24] = org[17];
	new[18] = org[18];
	new[12] = org[19];
	new[ 7] = org[20];
	new[ 3] = org[21];

	new[28] = org[ 9];
	new[23] = org[10];
	new[17] = org[11];
	new[11] = org[12];
	new[ 6] = org[13];
	new[ 2] = org[14];

	new[22] = org[4];
	new[16] = org[5];
	new[10] = org[6];
	new[ 5] = org[7];
	new[ 1] = org[8];

	new[15] = org[0];
	new[ 9] = org[1];
	new[ 4] = org[2];
	new[ 0] = org[3];

	for (i = 0 ; i < NUM ; i++) {
		org[i] = new[i];
	}
}

int is_same_board(int *src, int *dst)
{
	int i;

	for (i = 0 ; i < NUM ; i++) {
		if (src[i] == COIN && src[i] != dst[i])
			return 0;
	}
	return 1;
}

void eliminate_same_board(void)
{
	int i, j, dir, k;
	int *board, count;

	for (i = 0 ; i < ans_cnt ; i++) {
		if (ans_boards[i][0] == -1)
			continue;

		board = ans_boards[i];

		for (k = 0 ; k < 2 ; k++) {
			for (dir = 0 ; dir < 6 ; dir++) {
				rotate_board(board);

				for (j = 0 ; j < ans_cnt ; j++) {
					if (i == j || ans_boards[j][0] == -1)
						continue;

					if (is_same_board(board, ans_boards[j])) {
						ans_boards[j][0] = -1;
					}
				}
			}
			reverse_board(board);
		}
	}

	count = 0;
	for (i = 0 ; i < ans_cnt ; i++) {
		if (ans_boards[i][0] == -1)
			continue;

		count++;
		printf("No.%d\n", count);

		disp_board(ans_boards[i]);
	}
	printf("回転鏡像解を除いた配置数は %d です\n", count);

}


/*
 * 再帰による探索処理
 */

/* pos位置にコインを置いたら3枚以上にならないかをチェック */
int check_cross_over(int pos)
{
	int i, j, k, coin, lineno;

	for (i = 0 ; i < cross[pos].num ; i++) {
		lineno = cross[pos].lineno[i];

		coin = 0;
		for (j = 0 ; j < lines[lineno].num ; j++) {
			if (board[ lines[lineno].site[j] ] == COIN)
				coin++;
		}
		if (coin >= 3)
			return 1;   /* NG: 直線上に3枚以上できてしまう */

		/* 直線上に2枚のコインが置いてあれば、残りの空のマス
		 * には配置禁止フラグ(NG)を立てる。
		 */
		if (coin == 2) {
			for (j = 0 ; j < lines[lineno].num ; j++) {
				k = lines[lineno].site[j];

				if (board[k] == 0) {
					board[k] = NG;

					assert(pos_sp < NUM);
					NG_pos_stack[pos_sp] = k;
					pos_sp++;

				}
			}
		}
	}

	return 0;  /* OK */
}

void sub(int coin, int pos)
{
	int i, ssp;

	/* 残りのマスをすべて埋めても最大数に届かないのであれば戻る */
	if (coin + (NUM - pos) < maxcoin) {
		return;
	}

	/* 最大数を更新 */
	if (coin > maxcoin) {
		maxcoin = coin;
		ans_cnt = 0;
/*		printf("最大数更新 %d\n", maxcoin);*/
	}

	/* 同じ解を記録 */
	if (coin == maxcoin) {
		assert(ans_cnt < 100);
		for (i = 0 ; i < NUM ; i++) {
			ans_boards[ans_cnt][i] = board[i];
		}
		ans_cnt++;
	}

	for (i = pos ; i < NUM ; i++) {
		if (board[i] != 0)
			continue;

		ssp = pos_sp;
		board[i] = COIN;

		if (check_cross_over(i) == 0) {
			sub(coin + 1, i + 1);
		}

		board[i] = 0;

		while (pos_sp > ssp) {
			pos_sp--;
			board[NG_pos_stack[pos_sp]] = 0;
		}
	}
}


/* 六角形の各マスについて交差する直線を探す */
void get_cross_line(void)
{
	int no, i, j, k;

	for (no = 0 ; no < NUM ; no++) {
		k = 0;

		for (i = 0 ; i < line_cnt ; i++) {
			for (j = 0 ; j < lines[i].num ; j++) {
				if (lines[i].site[j] == no) { /* noマスが含まれていれば */
					cross[no].lineno[k] = i;
					k++;
					break;
				}
			}
		}

		cross[no].num = k;
	}

#if 0
	for (no = 0 ; no < NUM ; no++) {
		printf("%d: [%d] ", no, cross[no].num);
		for (i = 0 ; i < cross[no].num ; i++) {
			printf("%d ", cross[no].lineno[i]);
		}
		printf("\n");
	}
#endif

}


/*
 * 六角形のマスから直線を見つける
 */
int check_uniq_line(int num, int *points)
{
	int i, j;

	/* 重複した直線式がないかチェック */
	for (i = 0 ; i < line_cnt ; i++) {
		if (lines[i].num == num) {
			for (j = 0 ; j < num ; j++) {
				if (lines[i].site[j] != points[j])
					break;
			}
			if (j == num)  /* 同じものがすでに存在する */
				return 0;
		}
	}

	return 1;
}

void find_line(void)
{
	int i, j, k, sx, sy, ex, ey, pcnt, lt, rt;
	int points[7];

	/* 適当な2点を選ぶ */
	for (i = 0 ; i < NUM ; i++) {
		for (j = i + 1 ; j < NUM ; j++) {
			sx = pieces[i].x;
			sy = pieces[i].y;

			ex = pieces[j].x;
			ey = pieces[j].y;

			/* 2点を結ぶ直線式を求める。
			 *
			 * Y = 傾き*X + (sy - 傾き*sx)
			 * (ex - sx)Y = (ey - sy)*X + ((ex - sx)sy - (ey - sy)*sx)
			 */

			/* 直線上にある中心点を探す */
			pcnt = 0;
			for (k = 0 ; k < NUM ; k++) {
				lt = (ex - sx) * pieces[k].y;
				rt =  (ey - sy)*pieces[k].x + (ex - sx)*sy - (ey-sy)*sx;
				if (lt == rt) {
					points[pcnt++] = k;
				}
			}

			if (pcnt >= 3) {  /* 3点以上を通過する直線のみ */
				if (check_uniq_line(pcnt, points)) {
					lines[line_cnt].num = pcnt;
					for (k = 0 ; k < pcnt ; k++) {
						lines[line_cnt].site[k] = points[k];
					}
					line_cnt++;
				}
			}
		}
	}

#if 0
	for (i = 0 ; i < line_cnt ; i++) {
		printf("%d: [%d] ", i+1, lines[i].num);
		for (j = 0 ; j < lines[i].num ; j++) {
			printf("%d ", lines[i].site[j]);
		}
		printf("\n");
	}
#endif
}

int main(void)
{
	clock_t t = clock();

	find_line();
	get_cross_line();

	sub(0, 0);

	printf("解：最大 %d 枚のコインを配置可能\n", maxcoin);

	eliminate_same_board();

    printf("time %.2f\n", (double)((clock() - t) / CLOCKS_PER_SEC));
	return 0;
}

