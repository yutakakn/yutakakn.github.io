/* 2001/9/23
 *
 * puz0110.c    with Borland C++Compiler 5.5.1(Windows2000)
 *                   gcc 2.96(RedHat Linux 7.1)
 *
 * CMAGAZINE 2001/10 No.127[こだ割り数]
 *
 * Copyright (C)1996-2001 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

#define NDEBUG   /* for assert(3): assert機能を抑止する場合に定義する */

#ifdef __GNUC__
	#define INLINE inline
#else
	#define INLINE
#endif


#define MAX_KETA 100      /* 最大桁 */

int numbuf[MAX_KETA];     /* こだ割り数BCD配列 */

int record[MAX_KETA];     /* 解保存バッファ */
int rec_keta = 1;


void disp(int *buf, int keta)
{
	int i;

	printf("%d桁: ", keta);
	for (i = 0 ; i < keta ; i++) {
		printf("%d", buf[i]);
	}
	printf("\n");
}


/* 整数(a)が数値(keta)で割り切れるか調べる
 *  1: 割り切れる
 *  0: 割り切れないッス
 */
int is_div_integer(int *a, int keta)
{
	int i, t, rem = 0;

	for (i = 0 ; i < keta ; i++) {
		t = a[i] + rem;
		rem = (t % keta) * 10;
	}

	return (rem == 0);
}

/* バックトラックでこだ割り数を探す */
void sub(int n)
{
	int i, flag;

	if (n > MAX_KETA) {
		printf("桁数 %d 以下には解がありません\n", MAX_KETA);
		return;
	}

	flag = 0;
	if ((n+1) % 10 == 0) {  /* 桁が10の倍数の場合 */
		/* 付ける数字は「0」しかない */
		for (i = 0 ; i <= 0 ; i++) {
			numbuf[n] = i;

			if (is_div_integer(numbuf, n + 1)) {
				flag++;
				sub(n + 1);
			}
		}

	} else if ((n+1) % 5 == 0) {  /* 桁が5の倍数の場合 */
		/* 付ける数字は「0」か「5」しかない */
		for (i = 0 ; i <= 5 ; i += 5) {
			numbuf[n] = i;

			if (is_div_integer(numbuf, n + 1)) {
				flag++;
				sub(n + 1);
			}
		}

	} else if ((n+1) % 2 == 0) {  /* 桁が偶数の場合 */
		/* 付ける数字は「偶数」であること */
		for (i = 0 ; i <= 8 ; i += 2) {
			numbuf[n] = i;

			if (is_div_integer(numbuf, n + 1)) {
				flag++;
				sub(n + 1);
			}
		}

	} else {  /* 桁が奇数の場合 */
		/* 付ける数字は0〜9のなんでもありえる */
		for (i = 0 ; i <= 9 ; i++) {
			numbuf[n] = i;

			if (is_div_integer(numbuf, n + 1)) {
				flag++;
				sub(n + 1);
			}
		}
	}


	if (flag == 0) {  /* (n+1)桁にこだ割り数が存在しなかった */
		if (n >= rec_keta) {
			/* (n+1)桁以降はこだ割り数になり得ないので、n桁の
			 * こだ割り数が最大となる可能性があるので保存しておく。
			 */
			rec_keta = n;
			for (i = 0 ; i < n ; i++) {
				record[i] = numbuf[i];
			}
/*			disp(numbuf, n); */
		}
	}

}

int main(void)
{
	clock_t tick = clock();
	int i;

	for (i = 1 ; i <= 9 ; i++) {
		numbuf[0] = i;
		sub(1);
	}

	printf("解：\n");
	disp(record, rec_keta);

    printf("time %.2f\n", (double)((clock() - tick) / CLOCKS_PER_SEC));
	return 0;
}


