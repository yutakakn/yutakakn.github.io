/*'98/12/1 - 12/5
 *Ｃマガジン '98/12月号『Ｃマガ電脳クラブ　第93回』
 *　with LSIC-86 Ver.3.5
 *
 *puz9812.c
 *標題【＋, −, ×, ÷, or nothing】
 *
 *●makefile
 *a.exe: puz9812.c
 *	lcc86 -o a.exe puz9812.c
 *
 *●LSICについて
 *　コンパイルを行うとエラーがでるがこれは c:\lsij\lsic86\bin\makedef で
 *　CC = lcc86と修正することで直る。
 *
 *　math.hを使うには c:\lsij\lsic86\bin\_lcc86 の最終行を変更する。
 *　　-lknjlib -lmathlib -ldoslib
 *             ~~~~~~~~~追加（この位置でないとダメ）
 *
 *　makeコマンドは c:\lsij\lsic86\bin\kmmake.exeであるが make.exe と
 *　リネームした方が使いやすい。
 *
 *　Windowsにインストールした場合ルートの autoexec.bat にパスを通す必要が
 *　あるが、最後の行に call \lsij\lsic86\bin\env86.bat を追加するだけで
 *　よい。こうすると、Windows起動時にバッチファイルの実行経過が見えてしま
 *　うので、env86.batの最初の行に @echo off を入れておけば抑止される。
 *
 *Copyright (C)1995-1998 平田豊
 *All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define isnum(c) ((c)>='1' && (c)<='9')

long form_value;   /* 計算結果N  */
int cnt;           /* Nになる数式の個数 */

char form[20];     /* 数式生成用 */
int form_pos;

long ch[256];      /* 文字列式 */
char conv_form[20];

char polish[50];   /* 逆ポーランド記法式 */
static char stack[50];
int pri[256];      /* それ用の優先度テーブル */

typedef struct {   /* 分数 */
	long up;
	long down;
}fract_t;

typedef struct {
	long ans;
	int cnt;
}answer_t;

#define A_SIZE 4000
answer_t answer[ A_SIZE ];
int answer_pos;

long max_ans;
int max_cnt;

/* 逆ポーランド式(buf)を分数で計算する */
long calculate(char *buf)
{
	static fract_t ans[50];
	fract_t tmp;
	char *p = buf;
	int sp = 0;
	
	while (*p) {
		if ( *p >= 'a' && *p <= 'z' ) {
			ans[sp].up = ch[*p];
			ans[sp].down = 1;
			sp++;
		} else {
			switch (*p) {
 			case '+':
 				tmp.up = ans[sp-2].up * ans[sp-1].down + ans[sp-1].up * ans[sp-2].down;
 				tmp.down = ans[sp-2].down * ans[sp-1].down;
 				break;
 			case '-':
 				tmp.up = ans[sp-2].up * ans[sp-1].down - ans[sp-1].up * ans[sp-2].down;
 				tmp.down = ans[sp-2].down * ans[sp-1].down;
 				break;
 			case '*':
 				tmp.up = ans[sp-2].up * ans[sp-1].up;
 				tmp.down = ans[sp-2].down * ans[sp-1].down;
 				break;
 			case '/':
 				tmp.up = ans[sp-2].up * ans[sp-1].down;
 				tmp.down = ans[sp-2].down * ans[sp-1].up;
 				break;
 			}
 			ans[sp-2] = tmp;
 			sp--;
		}
		p++;
	}
	
	if (ans[0].up % ans[0].down) return(-1); /* 割り切れない場合 */
	return( ans[0].up / ans[0].down );
}

/* 文字式(buf)→逆ポーランド記法式(polish)に変換 */
void conv_polish(char *buf)
{
	int i, sp1, sp2;
	char *p = buf;
	
	stack[0] = 0; 
	sp1 = sp2 = 0;
	while (*p) {
		while (pri[*p] <= pri[ stack[sp1] ]) {
			polish[++sp2] = stack[sp1--];
		}
		stack[++sp1] = *p++;
	}
	for (i = sp1 ; i > 0 ; i--) {
		polish[++sp2] = stack[i];
	}
	polish[sp2 + 1] = 0;
}

/* 数式(buf)→文字式変換(pol) */
void conv_char(char *buf, char *pol)
{
	char *p = buf;
	long n;
	int i;
	
	i = 0;
	while (*p) {
		if (!isnum(*p)) {
			*pol++ = *p;
			p++;
			continue;
		}
		n = 0;
		while (isnum(*p)) {
			n = 10 * n + (*p - '0');
			p++;
		}
		ch['a'+i] = n;
		*pol++ = 'a' + i;
		i++;
	}
	*pol = 0;
}

/* 数式生成 */
void sub(int n)
{
	static char *s = "+-*/";
	long ans;
	int i;
	
	if (n >= 9) {
		form[form_pos++] = '9';
		form[form_pos--] = 0;
		
		conv_char(form, conv_form);
		conv_polish(conv_form);
		ans = calculate( &polish[1] );
		
		if (ans >= form_value && ans < form_value+A_SIZE) {
			for (i = 0 ; i < answer_pos ; i++)
				if (answer[i].ans == ans) break;
			if (i != answer_pos) {
				answer[i].cnt++;
				if (answer[i].cnt > max_cnt) {
					max_cnt = answer[i].cnt;
					max_ans = ans;
				}
			} else {
				if (answer_pos >= A_SIZE) {
					printf("answer[] is lack\n"); exit(1);
				}
				answer[i].ans = ans;
				answer[i].cnt = 1;
				answer_pos++;
			}
		}
/*		if (ans == 10) { printf("%s = %ld\n", form, ans);}*/
		return;
	}
	
	form[form_pos++] = n + '0';
	for (i = 0 ; i < 5 ; i++) {
		if (i != 4) form[form_pos++] = s[i];
		sub(n + 1);
		if (i != 4) form_pos--;
	}
	form_pos--;
}

int main(void)
{
	time_t s = time(NULL);
	int i;

	for (i = 0 ; i < 256 ; i++) pri[i] = 3;
	pri['+'] = pri['-'] = 1;
	pri['*'] = pri['/'] = 2;
	pri[0] = -1;
	
	for (form_value = 1L ; form_value <= 111111102L ; form_value += A_SIZE) {
		form_pos = 0;

		for (i = 0 ; i < A_SIZE; i++) answer[i].ans = answer[i].cnt = 0;
		answer_pos = 0;
		max_ans = max_cnt = 0;
		sub(1);

		if (max_cnt < 10) break;
		for (i = 0 ; i < answer_pos ; i++) {
			/* 解は複数あるかもしれないので */
			if (answer[i].cnt == max_cnt) {
				printf("MAX: N = %ld  %d counts (%ld〜%ld)\n",
				answer[i].ans, answer[i].cnt, form_value, form_value+A_SIZE);
			}
		}
	}
	
	s = time(NULL) - s;
	printf("実行時間 %ld : %ld : %ld\n",(s/60)/60, (s/60)%60 , s % 60);
	return 0;
}

