/* 2002/5/1 - 5/12
 *
 * puz0205.c    with Visual C++ .NET(Windows2000)
 *
 * CMAGAZINE 2002/05 No.134[Ultimate Instant Insanity]
 *
 * Copyright (C)1996-2002 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define NDEBUG   /* for assert(3): assert機能を抑止する場合に定義する */
#include <assert.h>


/*
 * データ定義
 */

enum {
	R=0, G, B, Y, W   /* 色の定義 */
};

char *colname[] = {
	"赤", "緑", "青", "黄", "白"
};

#define BIT(n) (1 << (n))
#define DICE 5  /* 立方体の個数 */

int dice[DICE][6] = {  /* 立方体の展開図 */
	{
	R, Y, B,
	   G,
	   R,
	   W
	},
	{
	W, R, Y,
	   G,
	   Y,
	   B
	},
	{
	R, G, Y,
	   G,
	   B,
	   W
	},
	{
	R, W, G,
	   B,
	   B,
	   Y
	},
	{
	W, Y, B,
	   R,
	   G,
	   W
	},
};

/* 展開図のシルエットが以下の場合における，各面の対称面定義 

  +-+-+-+
  |0|1|2|
  +-+-+-+
    |3|
    +-+
    |4|
    +-+
    |5|
    +-+
*/
int dice_sym_table[6] = {
	2,4,0,5,1,3
};


/* 立方体の置き方 pos[通り][辺] */
int pos[24][4];

/* 4面の色情報（ビットで保存）*/
int dice_color[4];

/* 5つの立方体の設置情報 */
typedef struct {
	int dice_kind;   /* 立方体の種類(0〜4) */
	int dice_pos;    /* 立方体の置き方(0〜23) */
} dice_put_t;
dice_put_t dice_put[DICE];


/* 解の保存領域 */
#define REC_MAX 3000
dice_put_t record[REC_MAX][DICE];
int ans_count = 0;


/*
 * 関数定義
 */

void show_color(dice_put_t dice_put[])
{
	int i, j, d, idx;

	for (j = 0 ; j < DICE ; j++) {
		printf("%d(%d)", dice_put[j].dice_kind, dice_put[j].dice_pos);
		if (j < DICE-1)
			printf("-");
	}
	printf("\n");

	for (i = 0 ; i < DICE ; i++) {
		d = dice_put[i].dice_kind;

		assert(d < DICE);

		for (j = 0 ; j < 4 ; j++) {
			assert(dice_put[i].dice_pos < 24);
			assert(pos[dice_put[i].dice_pos][j] < 6);

			idx = dice[d][pos[dice_put[i].dice_pos][j]];
			assert(idx < 6);
			printf("%s｜", colname[idx]);
		}
		printf("\n");
	}
	printf("\n");
}

/* バックトラック */
void sub(int count)
{
	int j, idx;

	if (count >= DICE) {
		assert(ans_count < REC_MAX);
		for (j = 0 ; j < DICE ; j++) {
			record[ans_count][j] = dice_put[j];
		}

		show_color(dice_put);

		ans_count++;

		return;
	}


	for (idx = 0 ; idx < 24 ; idx++) {   /* 24とおりに置く */
#if 1
		if (count == 0) {  /* 最初のサイコロは3とおりのみの置き方に制限する */
			if (idx > 6)
				break;
			if (idx == 2)
				idx = 6;
		}
#endif

		/* 色がユニークかチェック */
		for (j = 0 ; j < 4 ; j++) {   /* 4面分 */
			if (dice_color[j] & BIT(dice[count][pos[idx][j]]))
				break;
		}
		if (j < 4)
			continue;

		/* 色のフラグを立てる */
		for (j = 0 ; j < 4 ; j++) {   /* 4面分 */
			dice_color[j] |= BIT(dice[count][pos[idx][j]]);
		}

		dice_put[count].dice_kind = count;
		dice_put[count].dice_pos = idx;

		sub(count + 1);

		/* 色のフラグを落とす */
		for (j = 0 ; j < 4 ; j++) {   /* 4面分 */
			dice_color[j] &= ~BIT(dice[count][pos[idx][j]]);
		}
	}

}

/* 立方体の置き方を生成する(24通り) */
void init(void)
{
	int i, j, idx;

	idx = 0;
	for (i = 0 ; i < 6 ; i++) {
		assert(idx < 24);

		for (j = 0 ; j < 6 ; j++) {
			if (j == i || j == dice_sym_table[i])
				continue;

			pos[idx][0] = i;
			pos[idx][2] = dice_sym_table[i];

			pos[idx][1] = j;
			pos[idx][3] = dice_sym_table[j];
			idx++;
		}
	}

#if 0
	for (i = 0 ; i < 24 ; i++) {
		printf("(%d): %d-%d-%d-%d\n", i, pos[i][0], pos[i][1], pos[i][2], pos[i][3]);
	}
#endif
}

int main(void)
{
	clock_t tick = clock();

	init();
	sub(0);

	printf("解 %d とおり\n", ans_count);

    printf("time %.2f\n", (double)(clock() - tick) / CLOCKS_PER_SEC);
	return 0;
}


