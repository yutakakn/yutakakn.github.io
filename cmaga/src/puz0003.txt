/* 2000/2/27 - 3/3
 *
 * puz0003.c    with Borland C++Builder4
 * CMAGAZINE 2000/3 No.108[パズルペンシルスタンド]
 *
 * Copyright (C)1996-2000 平田豊
 * All rights reserved.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define POS(x,y) ((x) + (y)*3)

int org_small[6][3] = {
	{1,1,1}, /* A */
	{2,1,1}, /* B */
	{1,2,1}, /* C */
	{2,2,1}, /* D */
	{2,1,2}, /* E */
	{2,2,2}, /* F */
};

int org_large[6][2][3] = {
	{ {2,2,2},{1,1,1} }, /* G */
	{ {2,2,1},{1,1,2} }, /* H */
	{ {2,2,1},{1,2,1} }, /* I */
	{ {2,2,1},{2,1,1} }, /* J */
	{ {2,1,2},{2,1,1} }, /* K */
	{ {2,1,2},{1,2,1} }, /* L */
};

/* 幅3のピースデータ */
typedef struct {
	int num;
	int cut[2][3];  /* 最大2パターン */
}Small;
Small small[6];

/* 幅6のピースデータ */
typedef struct {
	int num;
	int cut[4][2][3]; /* 最大4パターン */
}Large;
Large large[6];

int small_flag[6], large_flag[6];  /* 使用チェックフラグ */
int box[6][9];        /* 組立の状態記録テーブル */
int choice[12];       /* 選択したピース */

/* 解の記録用 */
int ansbox[50][6][9];
int anschoice[50][12];
int ans_cnt, true_cnt;

void debug(int choice[], int box[][9])
{
	int i, j;
	
	for (i = 0 ; i < 6 ; i++) {
		if (i == 0) 
			printf("%c %c %c\n", choice[0]+'A', choice[1]+'A', choice[2]+'A');
		if (i == 3 || i == 4) 
			printf("%c %c %c\n", choice[6]+'A', choice[7]+'A', choice[8]+'A');
		for (j = 0 ; j < 3 ; j++) {
			printf("%d %d %d", box[i][0+j*3],box[i][1+j*3],box[i][2+j*3]);
			if (i == 1 || i == 2)
				printf("%c", choice[3+j]+'A');
			if (i == 5)
				printf("%c", choice[9+j]+'A');
			printf("\n");
		}
		printf("\n");
	}
	/*
	for (i = 0 ; i < 12 ; i++) {
		printf("%c ", choice[i] + 'A');
	} */
	printf("\n");
}

/* 鏡像解のチェック */
void check(void)
{
	int i, j;
	
	for (i = 0 ; i < ans_cnt-1 ; i++) {
		if (anschoice[i][0] == -1) continue;
		for (j = i+1 ; j < ans_cnt ; j++) {
			if (anschoice[j][0] == -1) continue;
			if (anschoice[i][3] == anschoice[j][5] &&
				anschoice[i][4] == anschoice[j][4] &&
				anschoice[i][5] == anschoice[j][3] &&
				anschoice[i][9] == anschoice[j][11] &&
				anschoice[i][10] == anschoice[j][10] &&
				anschoice[i][11] == anschoice[j][9]) {
				
				anschoice[j][0] = -1;
				break;
			}
		}
	}
	
	true_cnt = 0;
	for (i = 0 ; i < ans_cnt ; i++) {
		if (anschoice[i][0] == -1) continue;
		true_cnt++;
		printf("%d 番目\n", true_cnt);
		debug(anschoice[i], ansbox[i]);
	}
}

/* 探索処理 */
void sub(int n)
{
	int i, j, k, kind;
	
	if (n >= 12) {  /* ぜんぶ置けた */
		for (i = 0 ; i < 12 ; i++)
			anschoice[ans_cnt][i] = choice[i];
		for (i = 0 ; i < 6 ; i++)
			for (j = 0 ; j < 9 ; j++)
				ansbox[ans_cnt][i][j] = box[i][j];
		ans_cnt++;
		return;
	}
	
	if (n >=3 && n <= 8) {
		/* 大きいピースから3つを選ぶ */
		for (kind = 0 ; kind < 6 ; kind++) {
			if (large_flag[kind] == 1) continue;
			large_flag[kind] = 1;
			choice[n] = kind + 6;
			for (i = 0 ; i < large[kind].num ; i++) {  /* ピースのパターン */
				for (j = 0 ; j < 3 ; j++) {
					/* 直下のピースの型とぴったり合うか調べる */
					if (n <= 5) {
						if (large[kind].cut[i][1][j] + box[0][POS(j, n-3)] != 3)
							break;
					} else {
						if (large[kind].cut[i][1][j] + box[2][POS(n-6, j)] != 3)
							break;
					}
				}
				if (j == 3) {
					for (k = 0 ; k < 3 ; k++) {
						if (n <= 5) {
							box[1][POS(k, n-3)] = large[kind].cut[i][1][k];
							box[2][POS(k, n-3)] = large[kind].cut[i][0][k];
						} else {
							box[3][POS(n-6, k)] = large[kind].cut[i][1][k];
							box[4][POS(n-6, k)] = large[kind].cut[i][0][k];
						}
					}
					sub(n + 1);
				}
			}
			large_flag[kind] = 0;
		}
	}
	
	if (n <= 2 || (n >= 9 && n <= 11)) {
		/* 小さいピースから3つを選ぶ */
		for (kind = 0 ; kind < 6 ; kind++) {
			if (small_flag[kind] == 1) continue;
			/* Aは一番下の左、真ん中のいずれかに限定して置く */
			if (kind == 0 && !(n == 0 || n == 1)) continue;
			small_flag[kind] = 1;
			choice[n] = kind;
			for (i = 0 ; i < small[kind].num ; i++) {
				j = 3;
				if (n >= 9) {
					/* 直下のピースの型とぴったり合うか調べる */
					for (j = 0 ; j < 3 ; j++) {
						if (small[kind].cut[i][j] + box[4][POS(j, n-9)] != 3)
							break;
					}
				}
				if (j == 3) {
					for (k = 0 ; k < 3 ; k++) {
						if (n <= 2)
							box[0][POS(n, k)] = small[kind].cut[i][k];
						else
							box[5][POS(k, n-9)] = small[kind].cut[i][k];
					}
					sub(n + 1);
				}
			}
			small_flag[kind] = 0;
		}
	}
}

/* ピースの組合せを求める */
void init(void)
{
	int i, j, k, s, kind;
	int tmp[2][3];
	
	/* 小さい方のピース */
	for (kind = 0 ; kind < 6 ; kind++) {
		small[kind].num = 1;
		for (i = 0 ; i < 3 ; i++)
			small[kind].cut[0][i] = org_small[kind][i];
		if (org_small[kind][0] != org_small[kind][2]) {
			small[kind].num = 2;
			small[kind].cut[1][0] = org_small[kind][2];
			small[kind].cut[1][1] = org_small[kind][1];
			small[kind].cut[1][2] = org_small[kind][0];
		}
	}
	
	/* 大きい方のピース */
	for (kind = 0 ; kind < 6 ; kind++) {
		large[kind].num = 1;
		for (i = 0 ; i < 2 ; i++)
			for (j = 0 ; j < 3 ; j++)
				large[kind].cut[0][i][j] = org_large[kind][i][j];
		
		for (k = 0 ; k < 3 ; k++) {
			if (k == 0) {
				/* 左右入れ替え */
				tmp[0][0] = org_large[kind][0][2];
				tmp[0][1] = org_large[kind][0][1];
				tmp[0][2] = org_large[kind][0][0];
				tmp[1][0] = org_large[kind][1][2];
				tmp[1][1] = org_large[kind][1][1];
				tmp[1][2] = org_large[kind][1][0];
			} else if (k == 1) {
				/* 上下入れ替え */
				tmp[0][0] = org_large[kind][1][0];
				tmp[0][1] = org_large[kind][1][1];
				tmp[0][2] = org_large[kind][1][2];
				tmp[1][0] = org_large[kind][0][0];
				tmp[1][1] = org_large[kind][0][1];
				tmp[1][2] = org_large[kind][0][2];
			} else {
				/* 左右・上下入れ替え */
				tmp[0][0] = org_large[kind][1][2];
				tmp[0][1] = org_large[kind][1][1];
				tmp[0][2] = org_large[kind][1][0];
				tmp[1][0] = org_large[kind][0][2];
				tmp[1][1] = org_large[kind][0][1];
				tmp[1][2] = org_large[kind][0][0];
			}
			
			for (s = 0; s < large[kind].num ; s++) {
				for (i = 0 ; i < 2 ; i++)
					for (j = 0 ; j < 3 ; j++)
						if (tmp[i][j] != large[kind].cut[s][i][j])
							goto skip;
				break;
			skip:;
			}
			if (s == large[kind].num) {
				for (i = 0 ; i < 2 ; i++)
					for (j = 0 ; j < 3 ; j++)
						large[kind].cut[large[kind].num][i][j] = tmp[i][j];
				large[kind].num++;
			}
		}
	}
}

int main(void)
{
	clock_t t = clock();
	
	init();
	sub(0);
	check();
	printf("解: %d 通り\n", true_cnt);

    printf("time %f\n", (clock() - t) / CLK_TCK);
	return 0;
}

